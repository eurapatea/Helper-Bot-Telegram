import logging
import os
import sys
import smtplib
import ssl
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import init_db, add_admin, is_admin, save_ticket, update_status, get_user_id_by_ticket, get_tickets_by_status, save_feedback, get_feedback

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT"))
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASS = os.getenv("EMAIL_PASS")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π
MAX_ATTACHMENTS = 3

# –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
LOCK_FILE = "bot.lock"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏
STATES = {
    'START': 0,
    'CONFIG': 1,
    'ORG_DEPT': 2,
    'NAME': 3,
    'PHONE': 4,
    'DESCRIPTION': 5,
    'FEEDBACK': 6
}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
async def download_file(bot, file_id, file_name):
    file = await bot.get_file(file_id)
    file_path = f"temp_{file_id}_{file_name}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    await file.download_to_drive(file_path)
    return file_path

# –û—Ç–ø—Ä–∞–≤–∫–∞ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ü–æ—á—Ç—É
def send_email(ticket_id, config, org_dept, name, phone, description, attachments=None):
    subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id} –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
    body = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}:\n"
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–¥–µ–ª: {org_dept}\n"
        f"–ò–º—è: {name}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç–æ"
    )

    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = EMAIL_USER  # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª–æ–≥–∏–Ω–æ–º SMTP
    msg['To'] = ADMIN_EMAIL
    msg.attach(MIMEText(body, 'plain'))

    if attachments:
        for file_path in attachments:
            try:
                with open(file_path, 'rb') as f:
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(f.read())
                    encoders.encode_base64(part)
                    part.add_header('Content-Disposition', f'attachment; filename={os.path.basename(file_path)}')
                    msg.attach(part)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SMTP_SSL –¥–ª—è –ø–æ—Ä—Ç–∞ 465
        with smtplib.SMTP_SSL(EMAIL_HOST, EMAIL_PORT, context=ssl.create_default_context()) as server:
            server.login(EMAIL_USER, EMAIL_PASS)
            server.send_message(msg)
            logger.info(f"Email —Å –∑–∞—è–≤–∫–æ–π #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {ADMIN_EMAIL} —á–µ—Ä–µ–∑ {EMAIL_HOST} (–ø–æ—Ä—Ç {EMAIL_PORT})")
    except smtplib.SMTPAuthenticationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω ({EMAIL_USER}) –∏ –ø–∞—Ä–æ–ª—å. –û—à–∏–±–∫–∞: {e}")
    except smtplib.SMTPConnectError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {EMAIL_HOST}:{EMAIL_PORT}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞. –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
    finally:
        if attachments:
            for file_path in attachments:
                try:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
async def delete_message(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.context['chat_id']
    message_id = context.job.context['message_id']
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìù", callback_data='create_ticket')],
        [InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞ üìö", callback_data='help')]
    ]
    if is_admin(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öôÔ∏è", callback_data='admin_panel')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üëã\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ‚¨áÔ∏è",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üëã\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ‚¨áÔ∏è",
            reply_markup=reply_markup
        )
    context.user_data['state'] = STATES['START']
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–∞–≤–∫–∞"
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    help_text = (
        "üìö **–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏**\n\n"
        "–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:\n\n"
        "1. **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é**:\n"
        "   –£–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π —Å–≤—è–∑–∞–Ω–∞ –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', '–ó–£–ü' –∏ —Ç.–¥.).\n\n"
        "2. **–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –æ—Ç–¥–µ–ª**:\n"
        "   –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–û–û –†–æ–º–∞—à–∫–∞, IT-–æ—Ç–¥–µ–ª'). –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
        "3. **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û**:\n"
        "   –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏, —Å –∫–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n"
        "4. **–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**:\n"
        "   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 8-999-123-45-67 –∏–ª–∏ –¥—Ä—É–≥–æ–π) –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n"
        "5. **–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É**:\n"
        "   –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∏—Ö (–¥–æ 3 –≤–ª–æ–∂–µ–Ω–∏–π).\n\n"
        "üé• **–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**:\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É: [–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è](https://example.com/video.mp4)\n\n"
        "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º! üöÄ"
    )
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üìù", callback_data='create_ticket')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'create_ticket':
        keyboard = [
            [InlineKeyboardButton("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è", callback_data='config_bp')],
            [InlineKeyboardButton("–ó–£–ü", callback_data='config_zup')],
            [InlineKeyboardButton("–£–ù–§", callback_data='config_unf')],
            [InlineKeyboardButton("–£–¢", callback_data='config_ut')],
            [InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç", callback_data='config_doc')],
            [InlineKeyboardButton("–û–±—â–µ–ø–∏—Ç", callback_data='config_food')],
            [InlineKeyboardButton("–î—Ä—É–≥–∞—è", callback_data='config_other')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ‚¨áÔ∏è",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['CONFIG']

    elif query.data == 'help':
        await help(update, context)

    elif query.data.startswith('config_'):
        config_map = {
            'config_bp': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è',
            'config_zup': '–ó–£–ü',
            'config_unf': '–£–ù–§',
            'config_ut': '–£–¢',
            'config_doc': '–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç',
            'config_food': '–û–±—â–µ–ø–∏—Ç',
            'config_other': '–î—Ä—É–≥–∞—è'
        }
        config = config_map[query.data]
        context.user_data['config'] = config
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üõë –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–¥–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–û–û –†–æ–º–∞—à–∫–∞, IT-–æ—Ç–¥–µ–ª): üè¢",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['ORG_DEPT']

    elif query.data == 'back_to_start':
        context.user_data.clear()
        await start(update, context)

    elif query.data == 'admin_panel' and is_admin(query.from_user.id):
        await admin_panel(update, context)

    elif query.data.startswith('status_'):
        ticket_id, new_status = query.data.split('_')[1], query.data.split('_')[2]
        update_status(ticket_id, new_status)
        await notify_user(ticket_id, new_status, context)
        await admin_panel(update, context)

    elif query.data.startswith('rate_'):
        parts = query.data.split('_')
        if len(parts) != 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {query.data}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        ticket_id, rating_str = parts[1], parts[2]
        try:
            rating = int(rating_str)
            if rating not in range(1, 6):
                raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_str} –¥–ª—è ticket_id: {ticket_id}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        rating_text = {5: "–û—Ç–ª–∏—á–Ω–æ", 4: "–•–æ—Ä–æ—à–æ", 3: "–ù–æ—Ä–º–∞–ª—å–Ω–æ", 2: "–ü–ª–æ—Ö–æ", 1: "–£–∂–∞—Å–Ω–æ"}[rating]
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è ticket_id: {ticket_id}, —Ä–µ–π—Ç–∏–Ω–≥: {rating} ({rating_text})")
        save_feedback(ticket_id, rating)
        await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤: {rating_text} ({rating}/5)! üôå")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        context.job_queue.run_once(
            delete_message,
            30,
            context={
                'chat_id': update.effective_chat.id,
                'message_id': query.message.message_id
            }
        )

        context.user_data.clear()
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏

    elif query.data == 'finish_ticket':
        await save_and_finish(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = context.user_data.get('state', 0)
    text = update.message.text

    if state == STATES['ORG_DEPT']:
        context.user_data['org_dept'] = text
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û: üë§",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['NAME']

    elif state == STATES['NAME']:
        context.user_data['name'] = text
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        phone_keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì±", request_contact=True)]]
        phone_reply_markup = ReplyKeyboardMarkup(phone_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üõë –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 8-999-123-45-67) –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º: üìû",
            reply_markup=reply_markup
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞:",
            reply_markup=phone_reply_markup
        )
        context.user_data['state'] = STATES['PHONE']

    elif state == STATES['PHONE']:
        # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
        context.user_data['phone'] = text
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ", callback_data='finish_ticket')],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.message.reply_text(
            f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_ATTACHMENTS} –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
            f"–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: 0 –∏–∑ {MAX_ATTACHMENTS}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É'. ‚úçÔ∏è",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['DESCRIPTION']
        context.user_data['attachments'] = []
        context.user_data['description'] = ""
        context.user_data['last_message_id'] = message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    elif state == STATES['DESCRIPTION']:
        if text.lower() == '–Ω–µ—Ç':
            if not context.user_data['attachments']:
                context.user_data['description'] = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            await save_and_finish(update, context)
        else:
            context.user_data['description'] += f"{text}\n"
            keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ", callback_data='finish_ticket')],
                        [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'last_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['last_message_id']
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ {MAX_ATTACHMENTS - len(context.user_data['attachments'])} –≤–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É.",
                reply_markup=reply_markup
            )
            context.user_data['last_message_id'] = message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = context.user_data.get('state', 0)
    if state == STATES['PHONE'] and update.message.contact:
        phone_number = update.message.contact.phone_number
        context.user_data['phone'] = phone_number
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ", callback_data='finish_ticket')],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.message.reply_text(
            f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_ATTACHMENTS} –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
            f"–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: 0 –∏–∑ {MAX_ATTACHMENTS}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É'. ‚úçÔ∏è",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['DESCRIPTION']
        context.user_data['attachments'] = []
        context.user_data['description'] = ""
        context.user_data['last_message_id'] = message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = context.user_data.get('state', 0)
    if state != STATES['DESCRIPTION']:
        return

    attachments = context.user_data.get('attachments', [])
    remaining = MAX_ATTACHMENTS - len(attachments)
    if remaining <= 0:
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ", callback_data='finish_ticket')],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'last_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_message_id']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º {MAX_ATTACHMENTS} –≤–ª–æ–∂–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É' –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id
        return

    new_attachments = []
    description_updates = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑
    if update.message.photo:
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
        photo = update.message.photo[-1]
        file_id = photo.file_id
        file_name = f"photo_{file_id}.jpg"
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append("–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")
    elif update.message.video:
        file_id = update.message.video.file_id
        file_name = f"video_{file_id}.mp4"
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append("–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –≤–∏–¥–µ–æ")
    elif update.message.document:
        file_id = update.message.document.file_id
        file_name = update.message.document.file_name
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append(f"–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}")
    elif update.message.audio:
        file_id = update.message.audio.file_id
        file_name = update.message.audio.file_name
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append(f"–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –∞—É–¥–∏–æ: {file_name}")
    elif update.message.voice:
        file_id = update.message.voice.file_id
        file_name = f"voice_{file_id}.ogg"
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append("–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    elif update.message.sticker:
        file_id = update.message.sticker.file_id
        file_name = f"sticker_{file_id}.webp"
        file_path = await download_file(context.bot, file_id, file_name)
        new_attachments.append(file_path)
        description_updates.append("–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä")

    if new_attachments:
        attachments.extend(new_attachments)
        context.user_data['attachments'] = attachments
        context.user_data['description'] += "\n".join(description_updates) + "\n"

        remaining = MAX_ATTACHMENTS - len(attachments)
        keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ", callback_data='finish_ticket')],
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'last_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_message_id']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üõë –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {remaining} –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
                 f"–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(attachments)} –∏–∑ {MAX_ATTACHMENTS}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É'. ‚úçÔ∏è",
            reply_markup=reply_markup
        )
        context.user_data['last_message_id'] = message.message_id

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def save_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    config = context.user_data.get('config', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    org_dept = context.user_data.get('org_dept', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    name = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    phone = context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    description = context.user_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è').strip()
    attachments = context.user_data.get('attachments', None)

    ticket_id = save_ticket(user_id, config, org_dept, name, phone, description)
    if ticket_id:
        send_email(ticket_id, config, org_dept, name, phone, description, attachments)

        response_text = (
            f"–ó–∞—è–≤–∫–∞ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–∞! ‚úÖ\n"
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config} üíª\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–¥–µ–ª: {org_dept} üè¢\n"
            f"–ò–º—è: {name} üë§\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} üìû\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description} ‚úçÔ∏è\n"
            "–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ‚è≥"
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if 'last_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_message_id']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=response_text
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        keyboard = [
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìù", callback_data='create_ticket')],
            [InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞ üìö", callback_data='help')]
        ]
        if is_admin(update.effective_user.id):
            keyboard.append([InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öôÔ∏è", callback_data='admin_panel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏! üëã\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ‚¨áÔ∏è",
            reply_markup=reply_markup
        )
        context.user_data['state'] = STATES['START']
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id} –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
async def notify_user(ticket_id, new_status, context):
    user_id = get_user_id_by_ticket(ticket_id)
    if user_id and new_status == '–†–µ—à–µ–Ω–æ':
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ª–∏—á–Ω–æ üëç (5/5)", callback_data=f'rate_{ticket_id}_5')],
            [InlineKeyboardButton("–•–æ—Ä–æ—à–æ üëå (4/5)", callback_data=f'rate_{ticket_id}_4')],
            [InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ ü§î (3/5)", callback_data=f'rate_{ticket_id}_3')],
            [InlineKeyboardButton("–ü–ª–æ—Ö–æ üëé (2/5)", callback_data=f'rate_{ticket_id}_2')],
            [InlineKeyboardButton("–£–∂–∞—Å–Ω–æ üòû (1/5)", callback_data=f'rate_{ticket_id}_1')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data['ticket_id'] = ticket_id
        message = await context.bot.send_message(
            chat_id=user_id,
            text=f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{ticket_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status} üöÄ\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
            reply_markup=reply_markup
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π (message_id: {message.message_id}) —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        context.job_queue.run_once(
            delete_message,
            30,
            context={
                'chat_id': user_id,
                'message_id': message.message_id
            }
        )

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query

    in_progress = get_tickets_by_status('–í —Ä–∞–±–æ—Ç–µ')
    in_progress_text = "üìã –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:\n" if in_progress else "üìã –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    in_progress_keyboard = []
    for i, ticket in enumerate(in_progress, 1):
        in_progress_text += (
            f"{i}. #{ticket[0]} | {ticket[2]}\n"
            f"   UserID: {ticket[1]} | –û—Ä–≥/–û—Ç–¥–µ–ª: {ticket[3]}\n"
            f"   –ò–º—è: {ticket[4]} | –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[5]}\n"
            f"   –û–ø–∏—Å–∞–Ω–∏–µ: {ticket[6]}\n"
        )
        in_progress_keyboard.append([InlineKeyboardButton("–†–µ—à–µ–Ω–æ", callback_data=f'status_{ticket[0]}_–†–µ—à–µ–Ω–æ')])

    resolved = get_tickets_by_status('–†–µ—à–µ–Ω–æ')
    resolved_text = "‚úÖ –†–µ—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n" if resolved else "‚úÖ –†–µ—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    for i, ticket in enumerate(resolved, 1):
        rating = get_feedback(ticket[0])
        rating_text = f"–û—Ü–µ–Ω–∫–∞: {rating}/5" if rating is not None else "–û—Ü–µ–Ω–∫–∞: –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞"
        resolved_text += (
            f"{i}. #{ticket[0]} | {ticket[2]}\n"
            f"   UserID: {ticket[1]} | –û—Ä–≥/–û—Ç–¥–µ–ª: {ticket[3]}\n"
            f"   –ò–º—è: {ticket[4]} | –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[5]}\n"
            f"   –û–ø–∏—Å–∞–Ω–∏–µ: {ticket[6]}\n"
            f"   {rating_text}\n"
        )

    accepted = get_tickets_by_status('–ü—Ä–∏–Ω—è—Ç–æ')
    accepted_text = "üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:\n" if accepted else "üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    accepted_keyboard = []
    for i, ticket in enumerate(accepted, 1):
        accepted_text += (
            f"{i}. #{ticket[0]} | {ticket[2]}\n"
            f"   UserID: {ticket[1]} | –û—Ä–≥/–û—Ç–¥–µ–ª: {ticket[3]}\n"
            f"   –ò–º—è: {ticket[4]} | –¢–µ–ª–µ—Ñ–æ–Ω: {ticket[5]}\n"
            f"   –û–ø–∏—Å–∞–Ω–∏–µ: {ticket[6]}\n"
        )
        accepted_keyboard.append([
            InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f'status_{ticket[0]}_–í —Ä–∞–±–æ—Ç–µ'),
            InlineKeyboardButton("–†–µ—à–µ–Ω–æ", callback_data=f'status_{ticket[0]}_–†–µ—à–µ–Ω–æ')
        ])

    full_text = f"{accepted_text}\n{in_progress_text}\n{resolved_text}"
    keyboard = accepted_keyboard + in_progress_keyboard + [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data='admin_panel')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(full_text, reply_markup=reply_markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def check_single_instance():
    if os.path.exists(LOCK_FILE):
        print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º.")
        sys.exit(1)
    with open(LOCK_FILE, 'w') as f:
        f.write(str(os.getpid()))

def remove_lock():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    check_single_instance()
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        init_db()
        add_admin(7186761120)  # –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        add_admin(289675630)   # –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application = ApplicationBuilder().token(TOKEN).build()

        application.add_handler(CommandHandler('start', start))
        application.add_handler(CallbackQueryHandler(button_click))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        application.add_handler(MessageHandler(filters.ALL & ~(filters.TEXT | filters.COMMAND | filters.CONTACT), handle_media))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        remove_lock()

if __name__ == '__main__':
    main()